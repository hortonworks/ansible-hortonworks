---
- name: Load variables
  include_vars: "{{ item }}"
  with_first_found:
    - files:
        - "{{ ansible_os_family|lower }}-{{ ansible_distribution|lower }}-{{ ansible_distribution_major_version }}.yml"
        - "{{ ansible_os_family|lower }}-{{ ansible_distribution|lower }}-{{ ansible_distribution_version }}.yml"
        - "{{ ansible_os_family|lower }}-{{ ansible_distribution|lower }}.yml"
        - "{{ ansible_os_family|lower }}-{{ ansible_distribution_major_version }}.yml"
        - "{{ ansible_os_family|lower }}.yml"
        - defaults.yml
      paths:
        - ../ambari-server/vars

- name: Install the ambari-server package
  package:
    name: ambari-server
    update_cache: yes
    state: latest
  notify: Reload systemd

- meta: flush_handlers

- block:
    - name: Install mysql required packages (for hive embedded)
      package:
        name: "{{ item }}"
        update_cache: yes
        state: present
      with_items: "{{ mysql_packages | join(',') }}"

    - block:
        - name: Install mysql-server on Ubuntu 16 (for hive embedded)
          apt:
            name: 'mysql-server'
            update_cache: yes
            state: present

        - name: Configure mysql to listen on all interfaces (Ubuntu 16)
          ini_file:
            path: '/etc/mysql/mysql.conf.d/mysqld.cnf'
            create: no
            section: 'mysqld'
            option: 'bind-address'
            value: '*'
            no_extra_spaces: yes
            state: present
      when: ansible_distribution|lower == "ubuntu" and ansible_distribution_major_version|int == 16
      run_once: true
      delegate_to: "{{ hiveserver_hosts[0] }}"

    - name: Configure the Ambari JDBC driver for mysql (for hive embedded)
      shell: /usr/sbin/ambari-server setup --jdbc-db=mysql --jdbc-driver={{ mysql_jdbc_location }}
      notify: Restart ambari-server
  when: database == "embedded" and hiveserver_hosts is defined and hiveserver_hosts|length > 0

- block:
    - name: Install {{ database }} required packages
      package:
        name: "{{ item }}"
        update_cache: yes
        state: present
      with_items: "{{ lookup('vars', database + '_packages') | join(',') }}"

    - block:
        - name: Load the Ambari Server schema (postgres)
          postgresql_db:
            name: "{{ database_options.ambari_db_name }}"
            maintenance_db: "{{ database_options.ambari_db_name }}"
            login_host: "{{ database_options.external_hostname|default(ansible_fqdn,true) }}"
            port: "{{ postgres_port }}"
            login_user: "{{ database_options.ambari_db_username }}"
            login_password: "{{ database_options.ambari_db_password }}"
            state: restore
            target: /var/lib/ambari-server/resources/Ambari-DDL-Postgres-CREATE.sql
          when: ansible_os_family|lower != "suse"

        - block:
            - name: Create a .pgpass file (SUSE)
              template:
                src: pgpass.j2
                dest: /tmp/.pgpass-ambari
                mode: 0600
                force: yes

            - name: Check if the postgres schema was already uploaded (SUSE)
              shell: "PGPASSFILE=/tmp/.pgpass-ambari psql -h {{ database_options.external_hostname|default(ansible_fqdn,true) }} -U {{ database_options.ambari_db_username }} -p {{ postgres_port }} -w -d {{ database_options.ambari_db_name }} -c 'select user_id from ambari.users limit 0;'"
              register: check_results
              ignore_errors: true

            - name: Load the Ambari Server postgres schema (SUSE)
              shell: "PGPASSFILE=/tmp/.pgpass-ambari psql -h {{ database_options.external_hostname|default(ansible_fqdn,true) }} -U {{ database_options.ambari_db_username }} -p {{ postgres_port }} -w -d {{ database_options.ambari_db_name }} < /var/lib/ambari-server/resources/Ambari-DDL-Postgres-CREATE.sql"
              when: check_results is failed

            - name: Delete the .pgpass file (SUSE)
              file:
                path: /tmp/.pgpass-ambari
                state: absent
          when: ansible_os_family|lower == "suse"
      when: database == "postgres"

    - block:
        - name: Load the Ambari Server schema (mysql)
          mysql_db:
            name: "{{ database_options.ambari_db_name }}"
            login_host: "{{ database_options.external_hostname|default(ansible_fqdn,true) }}"
            login_port: "{{ mysql_port }}"
            login_user: "{{ database_options.ambari_db_username }}"
            login_password: "{{ database_options.ambari_db_password }}"
            state: import
            target: /var/lib/ambari-server/resources/Ambari-DDL-MySQL-CREATE.sql
          register: import_results
          ignore_errors: true

        - name: Fail if the mysql schema could not be loaded
          fail:
            msg: Schema could not be loaded. Error is {{ import_results.msg }}!
          when: import_results is failed and not import_results.msg is search("Table .* already exists")
      when: database == "mysql" or database == "mariadb"

    - name: Configure the Ambari JDBC driver
      shell: /usr/sbin/ambari-server setup --jdbc-db={{ database | regex_replace('mariadb', 'mysql') }} --jdbc-driver={{ lookup('vars', database + '_jdbc_location') }}
      notify: Restart ambari-server

    - name: Set the Ambari Server database setup options
      set_fact:
        ambari_database_options: "--database={{ database | regex_replace('mariadb', 'mysql') }} \
                                  --databasehost={{ database_options.external_hostname|default(ansible_fqdn,true) }} \
                                  --databaseport={{ lookup('vars', database | regex_replace('mariadb', 'mysql') + '_port') }} \
                                  --databasename={{ database_options.ambari_db_name }} \
                                  --databaseusername={{ database_options.ambari_db_username }} \
                                  --databasepassword={{ database_options.ambari_db_password }}"
  when: database != "embedded"

- name: Set the Ambari Server Java setup option (OpenJDK)
  set_fact:
    ambari_java_options: "-j {{ openjdk_path }}"
  when: java == "openjdk"

- name: Set the Ambari Server Java setup option (Oracle JDK)
  set_fact:
    ambari_java_options: "-j {{ oraclejdk_options.base_folder }}/latest"
  when: java == "oraclejdk"

- name: Update embedded java download url
  lineinfile:
    dest: /etc/ambari-server/conf/ambari.properties
    state: present
    regexp: "{{ item.regexp }}"
    line: "{{ item.line }}"
    backrefs: yes
  with_items:
    - { regexp: '^(jdk.*\.jcpol-url)=(.*)/ARTIFACTS/(.*)', line: '\g<1>={{ repo_base_url }}/ARTIFACTS/\g<3>' }
    - { regexp: '^(jdk.*\.url)=(.*)/ARTIFACTS/(.*)', line: '\g<1>={{ repo_base_url }}/ARTIFACTS/\g<3>' }
  when: java == 'embedded'

- name: Run Ambari Server setup
  shell: /usr/sbin/ambari-server setup -s {{ ambari_java_options|default("") }} {{ ambari_database_options|default("") }}
  notify: Restart ambari-server

- name: Update ambari-server log dir
  lineinfile:
    dest: /etc/ambari-server/conf/log4j.properties
    regexp: '^ambari.log.dir='
    line: 'ambari.log.dir={{ base_log_dir }}/ambari-server'
  notify: Restart ambari-server

- name: Increase the Ambari Server startup timeout
  lineinfile:
    path: /etc/ambari-server/conf/ambari.properties
    state: present
    line: 'server.startup.web.timeout={{ambari_server_startup_web_timeout}}'
  notify: Restart ambari-server

- name: Set the Ambari Server user
  lineinfile:
    path: /etc/ambari-server/conf/ambari.properties
    state: present
    line: 'ambari-server.user={{ambari_server_user}}'
  notify: Restart ambari-server

#TODO move to new role ansible-user
- name: Create Ambari Server user
  user:
      name: "{{ ambari_server_user }}"
      system: yes # not required. When creating an account C(state=present), setting this to C(yes) makes the user a system account. This setting cannot be changed on existing users.
      # ssh_key_bits: default set by ssh-keygen # not required. Optionally specify number of bits in SSH key to create.
      # update_password: always # not required. choices: always;on_create. C(always) will update passwords if they differ.  C(on_create) will only set the password for newly created users.
      # non_unique: no # not required. Optionally when used with the -u option, this option allows to change the user ID to a non-unique value.
      # force: no # not required. This only affects C(state=absent), it forces removal of the user and associated directories on supported platforms. The behavior is the same as C(userdel --force), check the man page for C(userdel) on your system for details and support.
      # skeleton: undefined # not required. Optionally set a home skeleton directory. Requires create_home option!
      # expires: undefined # not required. An expiry time for the user in epoch, it will be ignored on platforms that do not support this. Currently supported on GNU/Linux, FreeBSD, and DragonFlyBSD.,Since version 2.6 you can remove the expiry time specify a negative value. Currently supported on GNU/Linux and FreeBSD.
      # create_home: yes # not required. Unless set to C(no), a home directory will be made for the user when the account is created or if the home directory does not exist.,Changed from C(createhome) to C(create_home) in version 2.5.
      # password_lock: undefined # not required. Lock the password (usermod -L, pw lock, usermod -C). BUT implementation differs on different platforms, this option does not always mean the user cannot login via other methods. This option does not disable the user, only lock the password. Do not change the password in the same task. Currently supported on Linux, FreeBSD, DragonFlyBSD, NetBSD.
      # ssh_key_passphrase: undefined # not required. Set a passphrase for the SSH key.  If no passphrase is provided, the SSH key will default to having no passphrase.
      # groups: undefined # not required. List of groups user will be added to. When set to an empty string C(''), C(null), or C(~), the user is removed from all groups except the primary group. (C(~) means C(null) in YAML),Before version 2.3, the only input format allowed was a comma separated string. Now this parameter accepts a list as well as a comma separated string.
      # home: undefined # not required. Optionally set the user's home directory.
      # move_home: no # not required. If set to C(yes) when used with C(home=), attempt to move the user's old home directory to the specified directory if it isn't there already and the old home exists.
      # password: undefined # not required. Optionally set the user's password to this crypted value.,On macOS systems, this value has to be cleartext. Beware of security issues.,See U(https://docs.ansible.com/ansible/faq.html#how-do-i-generate-crypted-passwords-for-the-user-module) for details on various ways to generate these password values.
      # generate_ssh_key: no # not required. Whether to generate a SSH key for the user in question. This will B(not) overwrite an existing SSH key.
      # append: no # not required. If C(yes), add the user to the groups specified in C(groups).,If C(no), user will only be added to the groups specified in C(groups), removing them from all other groups.
      # uid: undefined # not required. Optionally sets the I(UID) of the user.
      # ssh_key_comment: ansible-generated on  # not required. Optionally define the comment for the SSH key.
      # group: undefined # not required. Optionally sets the user's primary group (takes a group name).
      # shell: undefined # not required. Optionally set the user's shell.,On macOS, before version 2.5, the default shell for non-system users was /usr/bin/false. Since 2.5, the default shell for non-system users on macOS is /bin/bash.
      # local: no # not required. Forces the use of "local" command alternatives on platforms that implement it. This is useful in environments that use centralized authentification when you want to manipulate the local users. I.E. it uses `luseradd` instead of `useradd`.,This requires that these commands exist on the targeted host, otherwise it will be a fatal error.
      # seuser: undefined # not required. Optionally sets the seuser type (user_u) on selinux enabled systems.
      # remove: no # not required. This only affects C(state=absent), it attempts to remove directories associated with the user. The behavior is the same as C(userdel --remove), check the man page for details and support.
      # state: absent # not required. choices: absent;present. Whether the account should exist or not, taking action if the state is different from what is stated.
      # ssh_key_file: .ssh/id_rsa # not required. Optionally specify the SSH key filename. If this is a relative filename then it will be relative to the user's home directory.
      # login_class: undefined # not required. Optionally sets the user's login class, a feature of most BSD OSs.
      # hidden: undefined # not required. macOS only, optionally hide the user from the login window and system preferences.,The default will be 'True' if the I(system) option is used.
      # ssh_key_type: rsa # not required. Optionally specify the type of SSH key to generate. Available SSH key types will depend on implementation present on target host.
  when: ambari_server_user != 'root'

- name: Create Ambari Server and Agent sudoers configuration
  template:
    src: ambari_sudoers.j2
    dest: /etc/sudoers.d/ambari
    mode: 0600
  tags:
  - ambari-user
  when: ambari_server_user != 'root'

- meta: flush_handlers

- name: Make sure the ambari-server service is started
  service:
    name: ambari-server
    state: started

- name: Make sure the ambari-server service is enabled
  service:
    name: ambari-server
    enabled: yes
  ignore_errors: true
